"""
Module de parsing des signaux de trading Telegram.

Ce module contient les classes et fonctions nÃ©cessaires pour extraire
les informations structurÃ©es des signaux de trading reÃ§us via Telegram.
"""

import re
from dataclasses import dataclass
from typing import List, Optional


@dataclass
class TradingSignal:
    """ReprÃ©sente un signal de trading structurÃ©."""
    
    symbol: str
    direction: str  # "LONG" ou "SHORT"
    entry_min: float
    entry_max: float
    take_profit_levels: List[float]
    stop_loss: float
    raw_text: str
    
    def __str__(self) -> str:
        """Retourne une reprÃ©sentation en chaÃ®ne du signal."""
        tp_str = ", ".join([str(tp) for tp in self.take_profit_levels])
        return (
            f"{self.symbol} {self.direction}\n"
            f"Entry: {self.entry_min} - {self.entry_max}\n"
            f"Take Profits: {tp_str}\n"
            f"Stop Loss: {self.stop_loss}"
        )


class SignalParser:
    """
    Classe pour analyser et extraire les informations des signaux de trading.
    
    Cette classe utilise des expressions rÃ©guliÃ¨res pour extraire les informations
    structurÃ©es des messages de signaux de trading.
    """
    
    def __init__(self):
        """Initialise le parser avec les patterns regex nÃ©cessaires."""
        # DÃ©finir les patterns regex pour l'extraction
        self.direction_pattern = re.compile(r'(LONG|SHORT)', re.IGNORECASE)
        self.symbol_pattern = re.compile(r'ðŸŸ¢\s+(\w+)\s+', re.IGNORECASE)
        self.entry_pattern = re.compile(r'Entry price:\s*(\d+(?:\.\d+)?)\s*-\s*(\d+(?:\.\d+)?)')
        self.tp_pattern = re.compile(r'TP:(.*?)(?:ðŸ›‘|$)', re.DOTALL)
        self.sl_pattern = re.compile(r'SL\s+(\d+(?:\.\d+)?)')
    
    def parse(self, message_text: str) -> Optional[TradingSignal]:
        """
        Parse un message texte et extrait les informations du signal de trading.
        
        Args:
            message_text: Le texte du message Ã  analyser.
            
        Returns:
            Un objet TradingSignal contenant les informations extraites,
            ou None si le parsing a Ã©chouÃ©.
        """
        try:
            # Extraire la direction
            direction_match = self.direction_pattern.search(message_text)
            if not direction_match:
                print("Direction (LONG/SHORT) non trouvÃ©e dans le message")
                return None
            direction = direction_match.group(1).upper()
            
            # Extraire le symbole
            symbol_match = self.symbol_pattern.search(message_text)
            if not symbol_match:
                print("Symbole non trouvÃ© dans le message")
                return None
            symbol = symbol_match.group(1)
            
            # Extraire la plage de prix d'entrÃ©e
            entry_match = self.entry_pattern.search(message_text)
            if not entry_match:
                print("Plage de prix d'entrÃ©e non trouvÃ©e dans le message")
                return None
            entry_min = float(entry_match.group(1))
            entry_max = float(entry_match.group(2))
            
            # Extraire les niveaux de Take Profit
            tp_levels = []
            tp_section = self.tp_pattern.search(message_text)
            if tp_section:
                tp_text = tp_section.group(1)
                tp_levels = [float(level.strip()) for level in re.findall(r'(\d+(?:\.\d+)?)', tp_text)]
            
            if not tp_levels:
                print("Niveaux de Take Profit non trouvÃ©s dans le message")
                return None
            
            # Extraire le Stop Loss
            sl_match = self.sl_pattern.search(message_text)
            if not sl_match:
                print("Stop Loss non trouvÃ© dans le message")
                return None
            stop_loss = float(sl_match.group(1))
            
            # CrÃ©er et retourner l'objet signal
            return TradingSignal(
                symbol=symbol,
                direction=direction,
                entry_min=entry_min,
                entry_max=entry_max,
                take_profit_levels=tp_levels,
                stop_loss=stop_loss,
                raw_text=message_text
            )
        except Exception as e:
            print(f"Erreur lors du parsing du signal: {str(e)}")
            return None


class SignalValidator:
    """
    Classe pour valider les signaux de trading extraits.
    
    Cette classe vÃ©rifie la validitÃ© et la cohÃ©rence des signaux
    de trading extraits par le SignalParser.
    """
    
    def validate(self, signal: TradingSignal) -> List[str]:
        """
        Valide un signal de trading.
        
        Args:
            signal: Le signal de trading Ã  valider.
            
        Returns:
            Une liste d'erreurs trouvÃ©es. Liste vide si le signal est valide.
        """
        errors = []
        
        # VÃ©rifier la prÃ©sence des champs obligatoires
        if not signal.symbol:
            errors.append("Symbole manquant")
        
        if not signal.direction:
            errors.append("Direction (LONG/SHORT) manquante")
        
        if not signal.entry_min or not signal.entry_max:
            errors.append("Plage de prix d'entrÃ©e incomplÃ¨te")
        
        if not signal.take_profit_levels or len(signal.take_profit_levels) == 0:
            errors.append("Niveaux de Take Profit manquants")
        
        if not signal.stop_loss:
            errors.append("Stop Loss manquant")
        
        # VÃ©rifier la cohÃ©rence des prix
        if signal.direction == "LONG":
            if signal.stop_loss >= signal.entry_min:
                errors.append("Stop Loss doit Ãªtre infÃ©rieur au prix d'entrÃ©e pour un LONG")
            
            for tp in signal.take_profit_levels:
                if tp <= signal.entry_max:
                    errors.append(f"Take Profit {tp} doit Ãªtre supÃ©rieur au prix d'entrÃ©e pour un LONG")
        else:  # SHORT
            if signal.stop_loss <= signal.entry_max:
                errors.append("Stop Loss doit Ãªtre supÃ©rieur au prix d'entrÃ©e pour un SHORT")
            
            for tp in signal.take_profit_levels:
                if tp >= signal.entry_min:
                    errors.append(f"Take Profit {tp} doit Ãªtre infÃ©rieur au prix d'entrÃ©e pour un SHORT")
        
        return errors


def main():
    """Fonction principale pour tester le module."""
    # Exemple de signal
    example_signal = """
    ðŸŸ¢ ETH LONG 

    ðŸŽ¯Entry price: 2255 - 2373

    TP:
    2500  
    2601  
    2770  
    3000  
    3180  
    3300  

    ðŸ›‘ SL 2150
    """
    
    # CrÃ©er le parser et parser le signal
    parser = SignalParser()
    signal = parser.parse(example_signal)
    
    if signal:
        print("Signal parsÃ© avec succÃ¨s:")
        print(signal)
        
        # Valider le signal
        validator = SignalValidator()
        errors = validator.validate(signal)
        
        if errors:
            print("\nErreurs de validation:")
            for error in errors:
                print(f"- {error}")
        else:
            print("\nLe signal est valide.")
    else:
        print("Ã‰chec du parsing du signal.")


if __name__ == "__main__":
    main()
