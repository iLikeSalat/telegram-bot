"""
Module de connexion √† Telegram pour recevoir les signaux de trading.

Ce module contient les classes et fonctions n√©cessaires pour se connecter
√† Telegram et recevoir les messages contenant des signaux de trading.
Version am√©lior√©e avec meilleure gestion des erreurs et support de formats multiples.
"""

import asyncio
import logging
import time
import json
from typing import List, Callable, Optional, Dict, Any, Tuple
from queue import Queue
from dataclasses import dataclass, asdict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, ContextTypes, filters

# Configuration du logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='telegram_binance_bot.log'
)
logger = logging.getLogger(__name__)

# Ajouter un handler pour afficher les logs dans la console
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)


@dataclass
class SignalMessage:
    """Repr√©sente un message de signal re√ßu de Telegram."""
    
    text: str
    chat_id: int
    message_id: int
    timestamp: float
    user_id: Optional[int] = None
    username: Optional[str] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """Convertit l'objet en dictionnaire."""
        return asdict(self)
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'SignalMessage':
        """Cr√©e un objet √† partir d'un dictionnaire."""
        return cls(**data)


class TelegramClient:
    """
    Classe pour g√©rer la connexion √† Telegram et recevoir les messages.
    
    Cette classe utilise python-telegram-bot pour se connecter √† l'API Telegram
    et recevoir les messages contenant des signaux de trading.
    """
    
    def __init__(self, token: str, signal_queue: Queue, allowed_chats: Optional[List[int]] = None,
                allowed_users: Optional[List[int]] = None, admin_users: Optional[List[int]] = None):
        """
        Initialise le client Telegram.
        
        Args:
            token: Le token d'API du bot Telegram.
            signal_queue: Une file d'attente pour stocker les signaux re√ßus.
            allowed_chats: Liste des IDs de chat autoris√©s √† envoyer des signaux.
                           Si None, tous les chats sont autoris√©s.
            allowed_users: Liste des IDs d'utilisateurs autoris√©s √† envoyer des signaux.
                           Si None, tous les utilisateurs sont autoris√©s.
            admin_users: Liste des IDs d'utilisateurs administrateurs.
                         Si None, aucun utilisateur n'est administrateur.
        """
        self.token = token
        self.signal_queue = signal_queue
        self.allowed_chats = allowed_chats or []
        self.allowed_users = allowed_users or []
        self.admin_users = admin_users or []
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
        self.bot_username = None
        self.bot_info = None
        
    async def initialize(self):
        """Initialise le bot et r√©cup√®re ses informations."""
        try:
            self.bot_info = await self.application.bot.get_me()
            self.bot_username = self.bot_info.username
            logger.info(f"Bot initialis√©: @{self.bot_username}")
        except Exception as e:
            logger.error(f"Erreur lors de l'initialisation du bot: {str(e)}")
            raise
        
    def setup_handlers(self):
        """Configure les gestionnaires de messages et de commandes."""
        # Gestionnaire pour les commandes
        self.application.add_handler(CommandHandler("start", self.handle_start))
        self.application.add_handler(CommandHandler("help", self.handle_help))
        self.application.add_handler(CommandHandler("status", self.handle_status))
        self.application.add_handler(CommandHandler("settings", self.handle_settings))
        self.application.add_handler(CommandHandler("admin", self.handle_admin, filters=filters.User(user_id=self.admin_users) if self.admin_users else None))
        
        # Gestionnaire pour les messages texte (potentiels signaux)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Gestionnaire pour les boutons inline
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Gestionnaire d'erreurs
        self.application.add_error_handler(self.handle_error)
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """G√®re la commande /start."""
        user = update.effective_user
        
        # V√©rifier si l'utilisateur est autoris√©
        if self.allowed_users and user.id not in self.allowed_users:
            await update.message.reply_text(
                "D√©sol√©, vous n'√™tes pas autoris√© √† utiliser ce bot. "
                "Contactez l'administrateur pour obtenir l'acc√®s."
            )
            logger.warning(f"Tentative d'acc√®s non autoris√©e: {user.id} (@{user.username})")
            return
        
        # Message de bienvenue
        welcome_text = (
            f"Bonjour {user.first_name}! Je suis votre bot de trading Binance Futures. "
            f"Envoyez-moi des signaux de trading et je les ex√©cuterai automatiquement.\n\n"
            f"Utilisez /help pour voir les commandes disponibles et le format des signaux attendu."
        )
        
        # Cr√©er un clavier inline pour les actions rapides
        keyboard = [
            [
                InlineKeyboardButton("Aide", callback_data="help"),
                InlineKeyboardButton("Statut", callback_data="status")
            ],
            [
                InlineKeyboardButton("Param√®tres", callback_data="settings")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"Nouvel utilisateur: {user.id} (@{user.username})")
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """G√®re la commande /help."""
        help_text = (
            "Je peux ex√©cuter automatiquement des trades sur Binance Futures "
            "bas√©s sur les signaux que vous m'envoyez.\n\n"
            "üìù Formats de signal accept√©s:\n\n"
            "1Ô∏è‚É£ Format standard:\n"
            "üü¢ SYMBOLE DIRECTION\n\n"
            "üéØEntry price: MIN - MAX\n\n"
            "TP:\n"
            "NIVEAU1\n"
            "NIVEAU2\n"
            "...\n\n"
            "üõë SL NIVEAU\n\n"
            "2Ô∏è‚É£ Format alert:\n"
            "SIGNAL ALERT\n"
            "COIN: SYMBOLE\n"
            "DIRECTION: DIRECTION\n"
            "ENTRY ZONE: MIN - MAX\n"
            "TARGETS: NIVEAU1, NIVEAU2, ...\n"
            "STOP LOSS: NIVEAU\n\n"
            "3Ô∏è‚É£ Format simple:\n"
            "SYMBOLE DIRECTION\n"
            "Entry around PRIX\n"
            "SL NIVEAU\n"
            "TP NIVEAU1, NIVEAU2, ...\n\n"
            "üìã Commandes disponibles:\n"
            "/start - D√©marrer le bot\n"
            "/help - Afficher cette aide\n"
            "/status - V√©rifier le statut du bot\n"
            "/settings - Configurer les param√®tres du bot\n"
        )
        
        # Ajouter les commandes admin si l'utilisateur est admin
        user_id = update.effective_user.id
        if user_id in self.admin_users:
            help_text += (
                "\nüîê Commandes administrateur:\n"
                "/admin - Acc√©der au panneau d'administration\n"
            )
        
        await update.message.reply_text(help_text)
    
    async def handle_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """G√®re la commande /status."""
        # R√©cup√©rer les informations de statut
        queue_size = self.signal_queue.qsize()
        
        status_text = (
            "üìä Statut du bot:\n\n"
            f"ü§ñ Bot: {'En ligne ‚úÖ' if self.bot_info else 'Hors ligne ‚ùå'}\n"
            f"üì® Signaux en attente: {queue_size}\n"
            f"üîí Chats autoris√©s: {len(self.allowed_chats)}\n"
            f"üë• Utilisateurs autoris√©s: {len(self.allowed_users)}\n"
        )
        
        await update.message.reply_text(status_text)
    
    async def handle_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """G√®re la commande /settings."""
        # Cr√©er un clavier inline pour les param√®tres
        keyboard = [
            [
                InlineKeyboardButton("Format de signal", callback_data="settings_format"),
                InlineKeyboardButton("Notifications", callback_data="settings_notifications")
            ],
            [
                InlineKeyboardButton("Risque", callback_data="settings_risk"),
                InlineKeyboardButton("Compte Binance", callback_data="settings_binance")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚öôÔ∏è Param√®tres du bot\n\n"
            "S√©lectionnez une cat√©gorie de param√®tres √† configurer:",
            reply_markup=reply_markup
        )
    
    async def handle_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """G√®re la commande /admin."""
        # V√©rifier si l'utilisateur est admin (double v√©rification)
        user_id = update.effective_user.id
        if user_id not in self.admin_users:
            await update.message.reply_text("Vous n'avez pas les droits d'administration.")
            logger.warning(f"Tentative d'acc√®s admin non autoris√©e: {user_id}")
            return
        
        # Cr√©er un clavier inline pour les actions admin
        keyboard = [
            [
                InlineKeyboardButton("G√©rer les utilisateurs", callback_data="admin_users"),
                InlineKeyboardButton("G√©rer les chats", callback_data="admin_chats")
            ],
            [
                InlineKeyboardButton("Logs", callback_data="admin_logs"),
                InlineKeyboardButton("Red√©marrer", callback_data="admin_restart")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîê Panneau d'administration\n\n"
            "S√©lectionnez une action:",
            reply_markup=reply_markup
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """G√®re les callbacks des boutons inline."""
        query = update.callback_query
        await query.answer()  # R√©pondre au callback pour √©viter le spinner
        
        callback_data = query.data
        
        if callback_data == "help":
            # Simuler la commande /help
            await self.handle_help(update, context)
        
        elif callback_data == "status":
            # Simuler la commande /status
            await self.handle_status(update, context)
        
        elif callback_data == "settings":
            # Simuler la commande /settings
            await self.handle_settings(update, context)
        
        elif callback_data.startswith("settings_"):
            # G√©rer les sous-menus des param√®tres
            setting_type = callback_data.split("_")[1]
            await self._handle_settings_submenu(update, context, setting_type)
        
        elif callback_data.startswith("admin_"):
            # G√©rer les sous-menus d'administration
            admin_action = callback_data.split("_")[1]
            await self._handle_admin_submenu(update, context, admin_action)
    
    async def _handle_settings_submenu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, setting_type: str) -> None:
        """G√®re les sous-menus des param√®tres."""
        query = update.callback_query
        
        if setting_type == "format":
            await query.edit_message_text(
                "üìù Format de signal\n\n"
                "Le bot supporte plusieurs formats de signaux de trading:\n"
                "- Format standard (avec emoji et structure claire)\n"
                "- Format alert (avec 'SIGNAL ALERT' et structure par lignes)\n"
                "- Format simple (avec symbole, direction et quelques prix)\n\n"
                "Le format est d√©tect√© automatiquement."
            )
        
        elif setting_type == "notifications":
            # Cr√©er un clavier inline pour les options de notification
            keyboard = [
                [
                    InlineKeyboardButton("Toutes ‚úÖ", callback_data="notif_all"),
                    InlineKeyboardButton("Importantes ‚ö†Ô∏è", callback_data="notif_important")
                ],
                [
                    InlineKeyboardButton("Aucune ‚ùå", callback_data="notif_none"),
                    InlineKeyboardButton("Retour", callback_data="settings")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üîî Param√®tres de notification\n\n"
                "Choisissez quand vous souhaitez recevoir des notifications:",
                reply_markup=reply_markup
            )
        
        elif setting_type == "risk":
            # Cr√©er un clavier inline pour les options de risque
            keyboard = [
                [
                    InlineKeyboardButton("Risque par trade", callback_data="risk_per_trade"),
                    InlineKeyboardButton("Risque total", callback_data="risk_total")
                ],
                [
                    InlineKeyboardButton("Retour", callback_data="settings")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚ö†Ô∏è Param√®tres de risque\n\n"
                "Configurez les param√®tres de risque pour vos trades:",
                reply_markup=reply_markup
            )
        
        elif setting_type == "binance":
            await query.edit_message_text(
                "üîë Compte Binance\n\n"
                "Pour configurer votre compte Binance, vous devez d√©finir vos cl√©s API.\n"
                "Envoyez un message au format suivant:\n\n"
                "/set_api_key VOTRE_CLE_API VOTRE_SECRET_API\n\n"
                "‚ö†Ô∏è Ne partagez jamais vos cl√©s API en public!\n"
                "Utilisez uniquement des cl√©s avec des permissions limit√©es (lecture et trading)."
            )
    
    async def _handle_admin_submenu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, admin_action: str) -> None:
        """G√®re les sous-menus d'administration."""
        query = update.callback_query
        
        # V√©rifier si l'utilisateur est admin
        user_id = update.effective_user.id
        if user_id not in self.admin_users:
            await query.edit_message_text("Vous n'avez pas les droits d'administration.")
            logger.warning(f"Tentative d'acc√®s admin non autoris√©e: {user_id}")
            return
        
        if admin_action == "users":
            # Liste des utilisateurs autoris√©s
            users_text = "üë• Gestion des utilisateurs\n\n"
            
            if not self.allowed_users:
                users_text += "Aucun utilisateur sp√©cifique autoris√© (tous les utilisateurs peuvent utiliser le bot).\n\n"
            else:
                users_text += "Utilisateurs autoris√©s:\n"
                for user_id in self.allowed_users:
                    users_text += f"- {user_id}\n"
                users_text += "\n"
            
            users_text += "Pour ajouter un utilisateur: /add_user ID\n"
            users_text += "Pour supprimer un utilisateur: /remove_user ID"
            
            await query.edit_message_text(users_text)
        
        elif admin_action == "chats":
            # Liste des chats autoris√©s
            chats_text = "üí¨ Gestion des chats\n\n"
            
            if not self.allowed_chats:
                chats_text += "Aucun chat sp√©cifique autoris√© (tous les chats sont accept√©s).\n\n"
            else:
                chats_text += "Chats autoris√©s:\n"
                for chat_id in self.allowed_chats:
                    chats_text += f"- {chat_id}\n"
                chats_text += "\n"
            
            chats_text += "Pour ajouter un chat: /add_chat ID\n"
            chats_text += "Pour supprimer un chat: /remove_chat ID"
            
            await query.edit_message_text(chats_text)
        
        elif admin_action == "logs":
            # Envoyer les derni√®res lignes du log
            try:
                with open('telegram_binance_bot.log', 'r') as f:
                    logs = f.readlines()
                
                # Prendre les 20 derni√®res lignes
                last_logs = logs[-20:]
                logs_text = "üìã Derniers logs:\n\n" + "".join(last_logs)
                
                # Tronquer si trop long
                if len(logs_text) > 4000:
                    logs_text = logs_text[:3997] + "..."
                
                await query.edit_message_text(logs_text)
            except Exception as e:
                await query.edit_message_text(f"Erreur lors de la lecture des logs: {str(e)}")
        
        elif admin_action == "restart":
            await query.edit_message_text(
                "üîÑ Red√©marrage du bot\n\n"
                "√ätes-vous s√ªr de vouloir red√©marrer le bot?\n\n"
                "‚ö†Ô∏è Tous les signaux en attente seront perdus."
            )
            
            # Ajouter des boutons de confirmation
            keyboard = [
                [
                    InlineKeyboardButton("Oui, red√©marrer", callback_data="confirm_restart"),
                    InlineKeyboardButton("Non, annuler", callback_data="admin")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üîÑ Red√©marrage du bot\n\n"
                "√ätes-vous s√ªr de vouloir red√©marrer le bot?\n\n"
                "‚ö†Ô∏è Tous les signaux en attente seront perdus.",
                reply_markup=reply_markup
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        G√®re les messages re√ßus et identifie les potentiels signaux de trading.
        
        Args:
            update: L'objet Update contenant les informations du message.
            context: Le contexte de l'application.
        """
        # R√©cup√©rer les informations du message
        message = update.message
        chat_id = update.effective_chat.id
        user = update.effective_user
        message_text = message.text
        
        # V√©rifier si le message provient d'une source autoris√©e
        if self.allowed_chats and chat_id not in self.allowed_chats:
            if self.allowed_users and user.id not in self.allowed_users:
                logger.info(f"Message ignor√© de chat/utilisateur non autoris√©: {chat_id}/{user.id}")
                return
        
        # V√©rifier si c'est un signal potentiel (filtrage basique)
        is_potential_signal = (
            "LONG" in message_text.upper() or 
            "SHORT" in message_text.upper() or
            "SIGNAL ALERT" in message_text.upper() or
            "TRADE SIGNAL" in message_text.upper()
        )
        
        if is_potential_signal:
            logger.info(f"Signal potentiel d√©tect√© de {chat_id}/{user.id}")
            
            # Cr√©er un objet SignalMessage
            signal_data = SignalMessage(
                text=message_text,
                chat_id=chat_id,
                message_id=message.message_id,
                timestamp=message.date.timestamp(),
                user_id=user.id,
                username=user.username
            )
            
            # Ajouter √† la file d'attente pour traitement
            self.signal_queue.put(signal_data)
            
            # Accuser r√©ception du signal
            await message.reply_text(
                "üì® Signal re√ßu et en cours de traitement.\n"
                "Je vous tiendrai inform√© de son ex√©cution."
            )
        else:
            logger.debug(f"Message non reconnu comme signal: {message_text[:20]}...")
    
    async def handle_error(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """G√®re les erreurs survenues pendant le traitement des mises √† jour."""
        error = context.error
        
        # Journaliser l'erreur
        logger.error(f"L'erreur {error} est survenue", exc_info=context.error)
        
        # D√©terminer le type d'erreur et r√©pondre en cons√©quence
        error_message = "D√©sol√©, une erreur s'est produite lors du traitement de votre message."
        
        if "Forbidden" in str(error):
            error_message = "Erreur: Le bot n'a pas les permissions n√©cessaires pour effectuer cette action."
        elif "Timed out" in str(error):
            error_message = "Erreur: La connexion a expir√©. Veuillez r√©essayer."
        elif "Not enough rights" in str(error):
            error_message = "Erreur: Le bot n'a pas assez de droits dans ce chat."
        
        # Envoyer un message √† l'utilisateur si possible
        if update and isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text(error_message)
    
    async def send_notification(self, chat_id: int, message: str, reply_markup: Optional[InlineKeyboardMarkup] = None) -> None:
        """
        Envoie une notification √† un chat sp√©cifique.
        
        Args:
            chat_id: L'ID du chat auquel envoyer la notification.
            message: Le message √† envoyer.
            reply_markup: Clavier inline optionnel √† joindre au message.
        """
        try:
            await self.application.bot.send_message(
                chat_id=chat_id, 
                text=message,
                reply_markup=reply_markup
            )
            logger.info(f"Notification envoy√©e √† {chat_id}")
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi de la notification √† {chat_id}: {str(e)}")
    
    async def send_signal_result(self, chat_id: int, signal_id: str, result: Dict[str, Any]) -> None:
        # Use a shorter timeout for buttons
        # Telegram buttons expire after some time
        """
        Envoie le r√©sultat du traitement d'un signal.
        
        Args:
            chat_id: L'ID du chat auquel envoyer le r√©sultat.
            signal_id: L'ID du signal trait√©.
            result: Le r√©sultat du traitement du signal.
        """
        status = result.get("status", "unknown")
        
        if status == "success":
            # Cr√©er un message de succ√®s d√©taill√©
            symbol = result.get("symbol", "")
            direction = result.get("direction", "")
            position_size = result.get("position_size", 0)
            leverage = result.get("leverage", 1)
            
            message = (
                f"‚úÖ Signal ex√©cut√© avec succ√®s!\n\n"
                f"üîπ ID: {signal_id}\n"
                f"üîπ Paire: {symbol}\n"
                f"üîπ Direction: {direction}\n"
                f"üîπ Taille: {position_size}\n"
                f"üîπ Levier: {leverage}x\n\n"
                f"Les ordres ont √©t√© plac√©s sur Binance Futures."
            )
            
            # Ajouter des boutons pour g√©rer la position
            keyboard = [
                [
                    InlineKeyboardButton("Voir position", callback_data=f"view_position_{signal_id}"),
                    InlineKeyboardButton("Fermer position", callback_data=f"close_position_{signal_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
        elif status == "rejected":
            message = (
                f"‚ö†Ô∏è Signal rejet√©\n\n"
                f"Raison: {result.get('message', 'Raison inconnue')}"
            )
            reply_markup = None
            
        elif status == "error":
            message = (
                f"‚ùå Erreur lors de l'ex√©cution du signal\n\n"
                f"D√©tails: {result.get('message', 'Erreur inconnue')}"
            )
            reply_markup = None
            
        elif status == "expired":
            message = (
                f"‚è±Ô∏è Signal expir√©\n\n"
                f"D√©tails: {result.get('message', 'Le signal a expir√©')}"
            )
            reply_markup = None
            
        else:
            message = (
                f"‚ùì Statut inconnu pour le signal\n\n"
                f"D√©tails: {json.dumps(result, indent=2)}"
            )
            reply_markup = None
        
        await self.send_notification(chat_id, message, reply_markup)
    
    def start(self) -> None:
        """D√©marre le bot en mode polling."""
        logger.info("D√©marrage du bot Telegram...")
        
        # Initialiser le bot de mani√®re asynchrone
        async def start_bot():
            await self.initialize()
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
        
        # Ex√©cuter la fonction asynchrone
        asyncio.run(start_bot())
    
    def start_async(self) -> None:
        """D√©marre le bot de mani√®re asynchrone."""
        logger.info("D√©marrage asynchrone du bot Telegram...")
        
        # Cr√©er une t√¢che asynchrone pour initialiser et d√©marrer le bot
        async def start_bot_async():
            await self.initialize()
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
        
        # Cr√©er et retourner la t√¢che
        return asyncio.create_task(start_bot_async())
    
    async def stop(self) -> None:
        """Arr√™te le bot."""
        logger.info("Arr√™t du bot Telegram...")
        await self.application.stop()
        await self.application.shutdown()


class SignalProcessor:
    """
    Classe pour traiter les signaux re√ßus de Telegram.
    
    Cette classe prend les signaux de la file d'attente, les parse,
    et les transmet au gestionnaire de trading.
    """
    
    def __init__(self, signal_queue: Queue, parser_callback: Callable, 
                 telegram_client: Optional[TelegramClient] = None,
                 max_retries: int = 3, retry_delay: float = 1.0):
        """
        Initialise le processeur de signaux.
        
        Args:
            signal_queue: La file d'attente contenant les signaux √† traiter.
            parser_callback: La fonction de callback pour parser les signaux.
            telegram_client: Le client Telegram pour envoyer des notifications.
            max_retries: Nombre maximum de tentatives de parsing.
            retry_delay: D√©lai entre les tentatives en secondes.
        """
        self.signal_queue = signal_queue
        self.parser_callback = parser_callback
        self.telegram_client = telegram_client
        self.running = False
        self.processing_task = None
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        
        # Statistiques de traitement
        self.stats = {
            "processed": 0,
            "success": 0,
            "failed": 0,
            "retried": 0
        }
    
    async def process_signals(self) -> None:
        """Traite les signaux de la file d'attente en continu."""
        self.running = True
        
        while self.running:
            try:
                # V√©rifier si la file d'attente contient des signaux
                if not self.signal_queue.empty():
                    # R√©cup√©rer le prochain signal
                    signal_data = self.signal_queue.get()
                    
                    # Si c'est un dictionnaire, le convertir en objet SignalMessage
                    if isinstance(signal_data, dict):
                        signal_data = SignalMessage.from_dict(signal_data)
                    
                    # Extraire les informations du signal
                    message_text = signal_data.text
                    chat_id = signal_data.chat_id
                    
                    logger.info(f"Traitement du signal de {chat_id}: {message_text[:20]}...")
                    self.stats["processed"] += 1
                    
                    # Parser le signal avec plusieurs tentatives si n√©cessaire
                    parsed_signal = None
                    parsing_errors = []
                    retries = 0
                    
                    while parsed_signal is None and retries < self.max_retries:
                        if retries > 0:
                            logger.info(f"Tentative {retries+1}/{self.max_retries} de parsing du signal")
                            self.stats["retried"] += 1
                            await asyncio.sleep(self.retry_delay)
                        
                        parsed_signal, errors = self.parser_callback(message_text)
                        parsing_errors = errors
                        retries += 1
                    
                    if parsed_signal:
                        logger.info(f"Signal pars√© avec succ√®s: {parsed_signal}")
                        self.stats["success"] += 1
                        
                        # Envoyer une notification si le client Telegram est disponible
                        if self.telegram_client:
                            # Cr√©er un message de confirmation d√©taill√©
                            confirmation = (
                                f"‚úÖ Signal pars√© avec succ√®s:\n\n"
                                f"üîπ Symbole: {parsed_signal.symbol}\n"
                                f"üîπ Direction: {parsed_signal.direction}\n"
                                f"üîπ Entr√©e: {parsed_signal.entry_min} - {parsed_signal.entry_max}\n"
                                f"üîπ Stop Loss: {parsed_signal.stop_loss}\n"
                                f"üîπ Take Profits: {', '.join([str(tp) for tp in parsed_signal.take_profit_levels])}\n"
                                f"üîπ Confiance: {parsed_signal.confidence:.2f}\n"
                            )
                            
                            # Ajouter des avertissements si pr√©sents
                            if parsing_errors:
                                confirmation += "\n‚ö†Ô∏è Avertissements:\n"
                                for error in parsing_errors:
                                    confirmation += f"- {error}\n"
                            
                            # Ajouter des boutons pour confirmer ou annuler
                            keyboard = [
                                [
                                    InlineKeyboardButton("Ex√©cuter", callback_data="execute_signal"),
                                    InlineKeyboardButton("Annuler", callback_data="cancel_signal")
                                ]
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            
                            await self.telegram_client.send_notification(
                                chat_id,
                                confirmation,
                                reply_markup
                            )
                    else:
                        logger.warning(f"√âchec du parsing du signal apr√®s {retries} tentatives: {message_text[:50]}...")
                        self.stats["failed"] += 1
                        
                        # Envoyer une notification d'√©chec
                        if self.telegram_client:
                            failure_message = (
                                "‚ùå √âchec du parsing du signal.\n\n"
                                "Le format du signal n'a pas pu √™tre reconnu. "
                                "Veuillez v√©rifier le format et r√©essayer.\n\n"
                                "Utilisez /help pour voir les formats accept√©s."
                            )
                            
                            # Ajouter les erreurs sp√©cifiques
                            if parsing_errors:
                                failure_message += "\n\nErreurs d√©tect√©es:\n"
                                for error in parsing_errors[:5]:  # Limiter √† 5 erreurs
                                    failure_message += f"- {error}\n"
                                
                                if len(parsing_errors) > 5:
                                    failure_message += f"- ... et {len(parsing_errors) - 5} autres erreurs\n"
                            
                            await self.telegram_client.send_notification(
                                chat_id,
                                failure_message
                            )
                    
                    # Marquer le signal comme trait√©
                    self.signal_queue.task_done()
                
                # Attendre un court instant avant de v√©rifier √† nouveau
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"Erreur lors du traitement du signal: {str(e)}")
                await asyncio.sleep(1)  # Attendre un peu plus longtemps en cas d'erreur
    
    def start(self) -> None:
        """D√©marre le traitement des signaux dans une t√¢che asynchrone."""
        if not self.processing_task or self.processing_task.done():
            self.processing_task = asyncio.create_task(self.process_signals())
            logger.info("Processeur de signaux d√©marr√©")
    
    def stop(self) -> None:
        """Arr√™te le traitement des signaux."""
        self.running = False
        if self.processing_task:
            self.processing_task.cancel()
            logger.info("Processeur de signaux arr√™t√©")
    
    def get_stats(self) -> Dict[str, int]:
        """Retourne les statistiques de traitement."""
        return self.stats


def main():
    """Fonction principale pour tester le module."""
    # Cr√©er une file d'attente pour les signaux
    signal_queue = Queue()
    
    # Cr√©er un client Telegram (remplacer 'YOUR_TOKEN' par un vrai token)
    # Pour les tests, vous pouvez utiliser un token de test obtenu via @BotFather
    telegram_client = TelegramClient(
        "YOUR_TOKEN", 
        signal_queue,
        admin_users=[123456789]  # Remplacer par votre ID Telegram
    )
    
    # Fonction de callback de test pour le parsing
    def test_parser(message_text):
        print(f"Parsing du message: {message_text[:50]}...")
        return None, ["Test parser not implemented"]
    
    # Cr√©er un processeur de signaux
    signal_processor = SignalProcessor(
        signal_queue,
        test_parser,
        telegram_client
    )
    
    # D√©marrer le bot et le processeur
    try:
        # D√©marrer le processeur de signaux
        signal_processor.start()
        
        # D√©marrer le bot Telegram
        telegram_client.start()
    except KeyboardInterrupt:
        print("Arr√™t du bot...")
        signal_processor.stop()


if __name__ == "__main__":
    main()
